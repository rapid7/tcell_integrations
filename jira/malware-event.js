//Instructions - populate the config.json file with all values and launch this script with 'node malware-1hr.js'
var request = require("request");
var config = require('./config.json');
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

var jira_url = config.jira_url,
    jira_auth = config.jira_auth,
    jira_project_key = config.jira_project_key,
    tcell_auth = config.tcell_auth,
    tcell_app_id = config.tcell_app_id,
    tcellOptions = {
        method: 'GET',
        url: 'https://api.tcell.io/customer/api/v1/apps/' + tcell_app_id + '/sources/inline/table?timerange=1h',
        headers: {
            'Authorization': 'Bearer ' + tcell_auth
        }
    };

jira_auth = Buffer.from(jira_auth).toString('base64');
console.log('Begin monitoring malware events for App ID ' + tcell_app_id);
function processMalwareEvents(){
    console.log('Checking for malware events...');
    request(tcellOptions, function (error, response, body) {
        if (error) throw new Error(error);
        var tcellInfo = JSON.parse(body);
        for (var i = 0;i < tcellInfo.table.length;i++){
            var malwareData = tcellInfo.table[i];
            if(tcellInfo.table[i].tags.includes('malware')){
                console.log('malware detected... sending to jira issue');
                var jiraOptions = {
                    method: 'POST',
                    url: jira_url + '/rest/api/2/issue/',
                    headers: {
                        'Authorization': 'Basic ' + jira_auth
                    },
                    json: {
                        "fields": {
                            "project": {
                                "key": jira_project_key
                            },
                            "summary": "tCell Event - New Malware Detected on " + malwareData.document_uri + "",
                            "description": "Application ID: " + tcell_app_id + " \n" +
                                "A malware event has occured on document URI " + malwareData.document_uri + " at " + malwareData.script_pos + ".\n" +
                                "Script ID for reference: " + malwareData.script_id,
                            "issuetype": {
                                "name": "Task"
                            }
                        }
                    }
                };
                request(jiraOptions, function (error, response, jirabody) {
                    if (error) throw new Error(error);
                    console.log(jirabody);
                });
                console.log(true)
            }else{
            }
        }
    });
}
processMalwareEvents();
setInterval(processMalwareEvents,1000*60*60+10000) //1 hr plus 10 seconds to ensure no overlap


